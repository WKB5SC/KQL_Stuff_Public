DeviceProcessEvents
| where InitiatingProcessFileName in~ ("dfsvc.exe", "rundll32.exe")
| where FileName endswith ".application" or ProcessCommandLine contains ".application"
| project Timestamp, DeviceName, FileName, ProcessCommandLine, InitiatingProcessFileName

DeviceProcessEvents
| where InitiatingProcessFileName =~ "dfsvc.exe" or ProcessCommandLine has ".application"
| extend AppDataPath = strcat(@"C:\Users\", AccountName, @"\AppData\Local\Apps\2.0")
| where FolderPath startswith AppDataPath
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, FolderPath, InitiatingProcessFileName
| order by Timestamp desc

DeviceProcessEvents
| where ProcessCommandLine has_any ("APPDOMAIN_MANAGER_ASM", "APPDOMAIN_MANAGER_TYPE", "COMPLUS_VERSION")
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, InitiatingProcessFileName
| order by Timestamp desc

DeviceNetworkEvents
| where RemoteUrl has_any ("amazonaws.com", "cloudfront.net", "lambda-url.", "execute-api.")
| where InitiatingProcessFileName in~ ("dfsvc.exe", "ZSATray.exe", "umt.exe")
| project Timestamp, DeviceName, InitiatingProcessFileName, RemoteUrl, RemoteIP, ActionType, ReportId
| order by Timestamp desc

let clickonceEvents = DeviceProcessEvents
    | where InitiatingProcessFileName =~ "dfsvc.exe" and ProcessCommandLine has ".application"
    | project DeviceId, ClickOnceTime = Timestamp, ClickOnceProc = FileName;

let awsTraffic = DeviceNetworkEvents
    | where RemoteUrl has_any ("amazonaws.com", "cloudfront.net", "lambda-url.", "execute-api.")
    | project DeviceId, NetworkTime = Timestamp, RemoteUrl, InitiatingProcessFileName;

clickonceEvents
| join kind=inner (awsTraffic) on DeviceId
| where abs(datetime_diff("minute", ClickOnceTime, NetworkTime)) < 10
| project DeviceId, ClickOnceTime, NetworkTime, ClickOnceProc, InitiatingProcessFileName, RemoteUrl

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\Security\TrustManager\PromptingLevel
Internet = Disabled

Preventing ClickOnce-based attacks—like the recent OneClik campaign—requires a layered defense strategy that combines system hardening, user awareness, and proactive monitoring. Here’s how to stay ahead of the threat:

---

🔐 1. Harden the Environment

• Disable ClickOnce from Internet Zones
Set the following registry key to block installations from untrusted sources:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\Security\TrustManager\PromptingLevel
Internet = DisabledThis prevents users from being prompted to install ClickOnce apps from the web A.
• Restrict ClickOnce Usage
If your organization doesn’t rely on ClickOnce, consider disabling it entirely via Group Policy or endpoint management tools.
• Enforce Code Signing
Require all ClickOnce apps to be signed with trusted certificates. Unsigned or self-signed apps should be blocked or flagged B.


---

🧠 2. Educate and Empower Users

• Phishing Awareness
Train users to recognize suspicious links and popups, especially those prompting software installs from unfamiliar domains.
• Visual Cues
Teach users to inspect the ClickOnce install dialog—malicious apps often spoof names like “Windows Update” or use misleading domains C.


---

🕵️‍♂️ 3. Monitor and Detect

• Baseline Legitimate ClickOnce Activity
Understand which apps are deployed via ClickOnce in your environment. Anything outside that baseline is suspicious.
• Hunt for Known Abuse Patterns
Use Defender KQL queries to detect:• `dfsvc.exe` launching `.application` files
• AppDomainManager injection
• AWS-based C2 traffic from unexpected processes

• Log and Alert on Rundll32 Abuse
Monitor for commands like:rundll32.exe dfshim.dll,ShOpenVerbApplicationwhich can be used to stealthily launch ClickOnce payloads A.


---

🧰 4. Use Trusted App Deployment Policies

• Trusted Publisher Certificates
Configure enterprise-wide trusted publishers so only vetted ClickOnce apps can install silently B.
• Zone-Based Permissions
Limit ClickOnce permissions based on deployment source (e.g., full trust only for internal network shares).


---

Would you like help creating a Group Policy template or registry script to enforce these protections? I can also help you simulate a safe test of ClickOnce behavior in a lab environment.

Yes—it absolutely does. The OneClik attack campaign relies on a `.application` file as its initial delivery mechanism A.

Here’s how it fits into the attack chain:

🧨 Phishing + ClickOnce Abuse
Victims receive phishing emails linking to fake websites (often hosted on Microsoft Azure). These sites serve a malicious `.application` file, which is a ClickOnce deployment manifest disguised as a legitimate installer A.

🚀 Execution via Trusted Binary
When the user clicks the `.application` file, it launches under `dfsvc.exe`—a trusted Windows binary responsible for handling ClickOnce apps. This allows the malware to:

• Bypass User Account Control (UAC)
• Avoid requiring admin privileges
• Blend in with legitimate activity A


🧬 Payload Delivery
The `.application` file triggers a .NET-based loader (OneClikNet), which uses AppDomainManager injection to hijack the assembly loading process. This leads to the execution of a Golang-based backdoor called RunnerBeacon A.

So while the `.application` file isn’t an executable itself, it’s the launchpad for the entire attack—making it a critical component of the OneClik threat.

Want to see how to block `.application` files from launching in your environment or simulate this behavior safely in a lab? I’ve got you covered.

Absolutely, N. Here’s a ClickOnce-focused KQL hunting pack designed to help you detect OneClik-style attacks across multiple stages—from initial execution to command-and-control (C2) activity and potential persistence.

---

🧭 1. Detect ClickOnce Launch via `.application` Files

DeviceProcessEvents
| where ProcessCommandLine has ".application"
| where InitiatingProcessFileName in~ ("dfsvc.exe", "rundll32.exe")
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, InitiatingProcessFileName

Flags ClickOnce apps launched via trusted binaries.

---

🧬 2. AppDomainManager Injection Indicators

DeviceProcessEvents
| where ProcessCommandLine has_any ("APPDOMAIN_MANAGER_ASM", "APPDOMAIN_MANAGER_TYPE", "COMPLUS_VERSION")
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine

Detects abuse of .NET AppDomainManager for stealthy payload injection.

---

☁️ 3. Suspicious AWS-Based C2 Traffic

DeviceNetworkEvents
| where RemoteUrl has_any ("amazonaws.com", "cloudfront.net", "lambda-url.", "execute-api.")
| where InitiatingProcessFileName in~ ("dfsvc.exe", "ZSATray.exe", "umt.exe")
| project Timestamp, DeviceName, RemoteUrl, InitiatingProcessFileName, RemoteIP, ActionType

Flags unexpected cloud traffic from binaries often abused in OneClik.

---

🔗 4. Correlate ClickOnce Launch with AWS C2

let clickonce = DeviceProcessEvents
    | where InitiatingProcessFileName =~ "dfsvc.exe" and ProcessCommandLine has ".application"
    | project DeviceId, ClickOnceTime = Timestamp, ClickOnceProc = FileName;

let awsC2 = DeviceNetworkEvents
    | where RemoteUrl has_any ("amazonaws.com", "cloudfront.net", "lambda-url.", "execute-api.")
    | project DeviceId, NetworkTime = Timestamp, RemoteUrl, InitiatingProcessFileName;

clickonce
| join kind=inner (awsC2) on DeviceId
| where abs(datetime_diff("minute", ClickOnceTime, NetworkTime)) < 10
| project DeviceId, ClickOnceTime, NetworkTime, ClickOnceProc, InitiatingProcessFileName, RemoteUrl

Connects ClickOnce execution with suspicious cloud traffic within a short window.

---

🧼 5. Detect Rundll32 Abuse for ClickOnce

DeviceProcessEvents
| where InitiatingProcessFileName =~ "rundll32.exe"
| where ProcessCommandLine has "dfshim.dll,ShOpenVerbApplication"
| project Timestamp, DeviceName, AccountName, ProcessCommandLine

Identifies stealthy ClickOnce launches via `rundll32`.

---

🧾 6. Detect Unsigned or Rare ClickOnce Apps

DeviceProcessEvents
| where ProcessCommandLine has ".application"
| extend Signer = tolower(SignerName)
| where isnull(Signer) or Signer !contains "microsoft"
| summarize count() by FileName, Signer, AccountName, DeviceName

Flags unsigned or unusually signed ClickOnce manifests.

---

Would you like me to bundle these into a workbook or Sentinel hunting rule format? I can also help you simulate benign ClickOnce activity to baseline your environment.

let clickonce = DeviceProcessEvents
    | where InitiatingProcessFileName =~ "dfsvc.exe"
    | where ProcessCommandLine has ".application"
    | project DeviceId, ClickOnceTime = Timestamp, AccountName, FileName, ProcessCommandLine;

let awsC2 = DeviceNetworkEvents
    | where RemoteUrl has_any ("amazonaws.com", "cloudfront.net", "lambda-url.", "execute-api.")
    | where InitiatingProcessFileName in~ ("dfsvc.exe", "ZSATray.exe", "umt.exe")
    | project DeviceId, NetworkTime = Timestamp, RemoteUrl, InitiatingProcessFileName;

clickonce
| join kind=inner (awsC2) on DeviceId
| where abs(datetime_diff("minute", ClickOnceTime, NetworkTime)) < 10
| project DeviceId, ClickOnceTime, NetworkTime, AccountName, ClickOnceBinary = FileName, CommandLine = ProcessCommandLine, AWS_URL = RemoteUrl, C2Process = InitiatingProcessFileName




To detect AppDomainManager injection (your #2) using Microsoft Defender and KQL, you’ll want to focus on how attackers manipulate environment variables or `.config` files to hijack .NET application behavior. Here’s a focused KQL query pack to help you uncover this stealthy technique:

---

🧬 1. Detect Suspicious Environment Variables

Attackers often set variables like `APPDOMAIN_MANAGER_ASM` or `APPDOMAIN_MANAGER_TYPE` to hijack .NET execution flow.

DeviceProcessEvents
| where ProcessCommandLine has_any ("APPDOMAIN_MANAGER_ASM", "APPDOMAIN_MANAGER_TYPE", "COMPLUS_VERSION")
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, InitiatingProcessFileName
| order by Timestamp desc

---

🧾 2. Detect `.exe.config` File Drops

Malicious `.config` files can be used to inject AppDomainManager logic into trusted binaries.

DeviceFileEvents
| where FileName endswith ".exe.config"
| where ActionType == "FileCreated"
| project Timestamp, DeviceName, FileName, FolderPath, InitiatingProcessFileName

---

🔍 3. Look for Matching `.exe` and `.exe.config` Pairs

This flags when a config file is dropped alongside a matching executable—often a sign of hijack setup.

let exeFiles = DeviceFileEvents
    | where FileName endswith ".exe"
    | extend BaseName = tostring(split(FileName, ".")[0])
    | project DeviceId, FolderPath, BaseName, ExeTime = Timestamp;

let configFiles = DeviceFileEvents
    | where FileName endswith ".exe.config"
    | extend BaseName = tostring(split(FileName, ".")[0])
    | project DeviceId, FolderPath, BaseName, ConfigTime = Timestamp;

exeFiles
| join kind=inner (configFiles) on DeviceId, FolderPath, BaseName
| where abs(datetime_diff("minute", ExeTime, ConfigTime)) < 10
| project DeviceId, FolderPath, BaseName, ExeTime, ConfigTime

---

🧠 Bonus Tip

If you know the name of the injected AppDomainManager class or DLL, you can also hunt for it in `DeviceImageLoadEvents` or `DeviceProcessModuleEvents`.

Would you like to wrap this into a Sentinel workbook or add anomaly scoring to reduce false positives? I can help you take it even further.

